from z3 import *

enc = [
    2436308828056147886221436210996908065048757263693358568640090233041496519089249523516860504425,
    1985342668282272842808231966973340994107591895372667735999872511529407486711339603111799008223,
    1534376508508397799395027722949773923166426527051976903359654790017318454333429682706737512021,
    1083410348734522755981823478926206852225261158731286070719437068505229421955519762301676015819,
    632444188960647712568619234902639781284095790410595238079219346993140389577609841896614519617,
    181478029186772669155414990879072710342930422089904405439001625481051357199699921491553023415,
    3902361548945925130419987516717912113235172323997051014101599544246735226737103575350089353261,
    3451395389172050087006783272694345042294006955676360181461381822734646194359193654945027857059
]

def gen_OTPs(key):
    for i in range(2, 10):
        yield i*key
s = Solver()
bits = 311
FLAG = BitVec("FLAG", bits)
key = BitVec("key", bits)

for OTP, e in zip(gen_OTPs(key), enc):
    s.add((FLAG + OTP)%2**bits == e)

s.check()
m = s.model()
print(m[FLAG].as_long().to_bytes(bits // 8 +1, "big").decode(), end="")