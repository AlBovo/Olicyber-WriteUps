from Crypto.Util.number import isPrime, long_to_bytes
from functools import reduce
from math import log2

def getPrime(n) -> int:
    for p in range(2, 2**16):
        ds = [int(d) for d in str(p)]
        r = reduce(lambda x, y: x * y, ds)

        if r in [1, 0]:
            continue

        while not isPrime(r) or r <= 2**256:
            if log2(r) >= 1450:
                break
            r = r * 2 - 1
        if n % r == 0:
            return r
                
N = 19947485316056905993931646775941987256548403731465180084945508247185642344122444186584301925382000751483279209250816790912519050540122026105676356199286065255875041514980612323221784967308146326689205858291964161149849179979371164314385332438988323302642256355694342283417841306799868619347413738695017860092178971579146235735267010603291619706159760367889906915448176629836688823504117353814051485333797705641462699567204450801352179713
ciphertext = 3378835538025100066858189605253385186193182606568947285413151320702836498308597573504106146927194477658866999634334567520784696503261127472226506671872322090990356345087228892030181029727782257077045419267662772484081883662849307300946673299443737643159198620964876221768731320724777961634357841823079813297467591107634823086591388724216402913192084061935863891901795120253011313582433207228716480519477417177404112549120051567425697098
p = getPrime(N)
q = N // p
phi = (p - 1) * (q - 1)
e = 65537
d = pow(e, -1, phi)

print(long_to_bytes(pow(ciphertext, d, N)).decode())