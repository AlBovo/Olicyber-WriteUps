#!/usr/bin/env python3
n = 113011902591202793977729821277230119022520303673065755456715002747017468761556771277938553111183168064533833852828939884958640972212699620979792524188225768278662551309759223101986936132461682919189478386462342094302247375780989519744998538823550670169859626592437759228349306962822321168328380368630439937457162706386394666965681519518730711763171176070597006806641537167199255076913051885623506556243544412406415524701021568311896100747026768442062128553268818740306831729032984677629359709571234852168674631476546878630052409648027718885391071617118963832468905554814649002834424839032458665435915271715553183531009
ct = 5467183367879307641328870520316871371537752896096438917370399174291371528341802199980057541991108121087559891527493978002226776115050985812711375655666076628921795269804131853077154886044675152104322680392163333540659659296411724055261180700644368995850995587809936265542045606254538674529339981557375695911967349761886092270565610236239413933678906483199849850502217931065261697203419675463252347683121718812260438062663965331382418738852360533702261815513744531140668387579036517378103884025462594143304149586883008472550239259297229096514671148671133726579887785297973037241152885708817827973466278216088191846161

def sorting(cand1, cand2):
    p1, q1 = cand1
    p2, q2 = cand2
    num_bit1 = bin(p1).count('0') + bin(q1).count('0')
    num_bit2 = bin(p2).count('0') + bin(q2).count('0')
    return num_bit1 < num_bit2 # guess

cand = [(0, 0)]
for i in range(1025):
    print(i)
    f = n % (1 << i)
    candtemp = []
    for p, q in cand:
        # 0x, 0x
        # 0x, 1x
        # 1x, 0x
        # 1x, 1x
        for j in [0, 1]:
            for e in [0, 1]:
                p1 = p + (j << i)
                q1 = q + (e << i)
                if (p1 * q1) % (1 << i) == f:
                    candtemp.append((p1, q1))
    cand = candtemp
    cand = sorted(cand, key=lambda pq: bin(pq[0]).count('0') + bin(pq[1]).count('0'))
    cand = cand[:1000]
    # print(cand, flush=True)

for p, q in cand:
    if p * q == n:
        print(p, q)
        phi = (p-1)*(q-1)
        d = pow(0x10001, -1, phi)
        pl = pow(ct, d, n)
        print(pl.to_bytes(pl.bit_length() // 8 + 1))
        break
