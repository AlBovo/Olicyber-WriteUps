#!/usr/bin/env python3
from sympy import *
from Crypto.Util.number import long_to_bytes, isPrime
from gmpy2 import iroot

e = 65537
n = 73835355773586632749497813712844974279688700968581353676365718256887741429589293987167857318819304298761226530765222129869744268663458302484923609419850715086294772630316875879671931990860760168632405376915473464245173555210859733420012801323450300287286827847372572895767079204521003431182215766356958645741
ct = 69088718730225565550533207665423162086878540640610709978042785622785990794595484186604907117720523080139401746613418389574889276052615162202284720710353059616183359504400646419053826554396432853908827511966214885915759786569544232364425295062591653836236590708223539383404510598672913303248612361154693570128
p = 1

for i in reversed(range(0, iroot(n, 2)[0])):
    if isPrime(i):
        p = i
        if n % p == 0:
            q = n//p
            fi = (p-1)*(q-1)
            d = pow(e, -1, fi)
            flag = long_to_bytes(pow(ct,d,n))
            print(flag.decode())
            break